generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["wedding"]
}

model Booking {
  id              String           @id @default(cuid())
  name            String
  email           String
  phone           String
  guestCount      Int
  eventType       String
  specialRequests String?
  date            DateTime         @db.Timestamptz(6)
  price           Float
  status          String           @default("pending")
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  payment         Payment?
  addOns          BookingAddOn[]

  @@index([date])
  @@index([status])
  @@index([email])
  @@schema("wedding")
}

model Payment {
  id              String   @id @default(cuid())
  bookingId       String   @unique
  amount          Float
  stripePaymentId String?
  status          String   @default("pending")
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([stripePaymentId])
  @@schema("wedding")
}

model DatePrice {
  id          String   @id @default(cuid())
  date        DateTime @unique @db.Timestamptz(6)
  price       Float
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  isAvailable Boolean  @default(true)

  @@index([date])
  @@schema("wedding")
}

model PricingRule {
  id         String    @id @default(cuid())
  name       String
  type       String
  price      Float
  startDate  DateTime? @db.Timestamptz(6)
  endDate    DateTime? @db.Timestamptz(6)
  daysOfWeek Int[]
  priority   Int       @default(0)
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)

  @@schema("wedding")
}

model Admin {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wedding")
}

model VenueSettings {
  id        String   @id @default(cuid())
  videoUrl  String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@schema("wedding")
}

model AddOn {
  id          String         @id @default(cuid())
  name        String
  description String?
  price       Float
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime       @updatedAt @db.Timestamptz(6)
  bookings    BookingAddOn[]

  @@schema("wedding")
}

model BookingAddOn {
  id        String   @id @default(cuid())
  bookingId String
  addOnId   String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  addOn     AddOn    @relation(fields: [addOnId], references: [id])

  @@unique([bookingId, addOnId])
  @@index([bookingId])
  @@index([addOnId])
  @@schema("wedding")
}
